<?php

namespace App\Models;

use Encore\Admin\Traits\DefaultDatetimeFormat;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Repair extends Model
{
    use DefaultDatetimeFormat;
    use HasFactory;

    protected $fillable = ['type', 'status', 'deposit', 'price'];
    protected $casts = [
        'problem' => 'array'
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::updating(function ($model) {
            if ($model->orders->isNotEmpty()) {
                // 如果存在订单
                switch ($model->status) {
                    case 1:
                        // 维修中
                        foreach ($model->orders as $order) {
                            $status = array_search('已预定', config('manager.order.status'));
                            $order->status = $status;
                            $order->push();
                        }
                        break;
                    case 2:
                        // 维修完成
                        foreach ($model->orders as $order) {
                            $status = array_search('已完成', config('manager.order.status'));
                            $order->status = $status;
                            $order->push();
                        }
                        break;

                    case 3:
                        // 已取件
                        foreach ($model->orders as $order) {
                            $status = array_search('已关闭', config('manager.order.status'));
                            $order->status = $status;
                            $order->push();
                        }
                        break;
                    default:
                        foreach ($model->orders as $order) {
                            $status = array_search('待处理', config('manager.order.status'));
                            $order->status = $status;
                            $order->push();
                        }
                        break;
                }
            }
        });
    }



    public function costumers()
    {
        return $this->belongsToMany(
            Costumer::class,
            'customer_repairs',
            'repair_id',
            'customer_id'
        );
    }

    public function components()
    {
        return $this->belongsToMany(
            Component::class,
            'repair_components',
            'repair_id',
            'component_id'
        );
    }

    public function orders()
    {
        return $this->belongsToMany(
            Order::class,
            'order_repairs',
            'repair_id',
            'order_id'
        );
    }

    public function details()
    {
        return $this->belongsToMany(
            RepairDetail::class,
            'detail_repairs',
            'repair_id',
            'detail_id'
        );
    }

    public function warranty()
    {
        return $this->hasOne(Warranty::class, 'repair_id');
    }

    //    public function status(): Attribute
    //    {
    //        return new Attribute(
    //            get: fn($value) => (config('manager.repair.status')[config('manager.repair.type')[$this->type]])[$value],
    //        );
    //    }

}
